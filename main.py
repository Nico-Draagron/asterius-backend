"""
Asterius Backend - FastAPI Application
Backend inteligente para an√°lise de vendas com IA
"""

import os
from datetime import datetime
from contextlib import asynccontextmanager
from typing import Optional, Dict, Any
from fastapi import FastAPI, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from dotenv import load_dotenv

# Importa m√≥dulos locais
from agent import AsteriusAgent
from gemini_agent import AsteriusGeminiAgent
from memory import ConversationMemory
from models import SalesPredictor
from schemas import (
    ChatRequest, ChatResponse,
    PredictRequest, PredictResponse,
    HealthResponse, ErrorResponse
)
from utils import validate_session_id, DateFormatter
from NOMADS.captar_nomads import NOMADSDownloader
import asyncio

# Carrega vari√°veis de ambiente
load_dotenv()

# Configura logger raiz para usar sa√≠da console em UTF-8 (evita UnicodeEncodeError no Windows)
import logging
import sys
import io

root_logger = logging.getLogger()
# Remove handlers existentes para evitar duplica√ß√£o ao recarregar em dev
for h in list(root_logger.handlers):
    root_logger.removeHandler(h)

# Envolve stdout.buffer em TextIOWrapper com encoding utf-8 e errors='replace'
console_stream = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
console_handler = logging.StreamHandler(console_stream)
console_handler.setLevel(logging.INFO)
console_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler.setFormatter(console_formatter)
root_logger.addHandler(console_handler)
root_logger.setLevel(logging.INFO)

# ============================================
# CONFIGURA√á√ïES GLOBAIS
# ============================================

# Vari√°veis de ambiente
AI_PROVIDER = os.getenv("AI_PROVIDER", "openai")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
MODEL_NAME = os.getenv("MODEL_NAME", "gpt-4o-mini")
GEMINI_MODEL = os.getenv("GEMINI_MODEL", "gemini-pro")
TEMPERATURE = float(os.getenv("TEMPERATURE", "0.7"))
MAX_TOKENS = int(os.getenv("MAX_TOKENS", "1000"))
ML_MODEL_PATH = os.getenv("ML_MODEL_PATH", "modelo/modelo_final_xgb.pkl")
HISTORY_PATH = os.getenv("HISTORY_PATH", "backend/data/history.json")
ENVIRONMENT = os.getenv("ENVIRONMENT", "development")


# Inst√¢ncias globais (ser√£o inicializadas no lifespan)
from typing import TYPE_CHECKING, Union
if TYPE_CHECKING:
    from agent import AsteriusAgent
    from gemini_agent import AsteriusGeminiAgent
    from memory import ConversationMemory
    from models import SalesPredictor

agent: Union["AsteriusAgent", "AsteriusGeminiAgent", None] = None  # Pode ser AsteriusAgent ou AsteriusGeminiAgent
memory: "ConversationMemory | None" = None
predictor: "SalesPredictor | None" = None


# ============================================
# LIFESPAN MANAGEMENT
# ============================================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gerencia o ciclo de vida da aplica√ß√£o.
    Inicializa recursos na startup e limpa no shutdown.
    """
    # Startup
    print("\n" + "="*50)
    print("üöÄ Inicializando Asterius Backend...")
    print("="*50)
    
    global agent, memory, predictor
    
    # Sincroniza banco SQLite e modelo .pkl do GCS para o container
    try:
        print("‚òÅÔ∏è Sincronizando arquivos essenciais do GCS...")
        try:
            from storage_manager import get_storage_manager
            sm = get_storage_manager()
            if sm:
                # Sincronizar banco SQLite
                db_gcs_path = "asterius.db"
                db_local_path = "asterius.db"
                if os.path.exists(db_local_path):
                    print("üóÑÔ∏è Banco SQLite j√° existe localmente.")
                else:
                    try:
                        sm.download_file(db_gcs_path, db_local_path)
                        print(f"‚úÖ Banco SQLite baixado do GCS: {db_gcs_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Banco SQLite n√£o encontrado no GCS: {e}")
                # Sincronizar modelo .pkl
                modelo_gcs_path = "modelo/modelo_final_xgb.pkl"
                modelo_local_path = "modelo/modelo_final_xgb.pkl"
                if os.path.exists(modelo_local_path):
                    print("‚úÖ Modelo .pkl j√° existe localmente.")
                else:
                    try:
                        sm.download_file(modelo_gcs_path, modelo_local_path)
                        print(f"‚úÖ Modelo .pkl baixado do GCS: {modelo_gcs_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Modelo .pkl n√£o encontrado no GCS: {e}")
            else:
                print("‚ö†Ô∏è storage_manager n√£o dispon√≠vel ou GCS n√£o configurado.")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao sincronizar arquivos do GCS: {e}")

        memory = ConversationMemory(history_path=HISTORY_PATH)
        predictor = SalesPredictor(model_path=ML_MODEL_PATH)

        # Escolhe o provedor de IA baseado na configura√ß√£o
        if AI_PROVIDER.lower() == "gemini":
            if not GEMINI_API_KEY:
                print("‚ö†Ô∏è AVISO: GEMINI_API_KEY n√£o configurada!")
                print("üìù Configure no arquivo .env para usar o Gemini")
                raise ValueError("GEMINI_API_KEY √© obrigat√≥ria para usar o Gemini")

            agent = AsteriusGeminiAgent(
                api_key=GEMINI_API_KEY,
                model_name=GEMINI_MODEL,
                temperature=TEMPERATURE,
                max_tokens=MAX_TOKENS,
                memory=memory,
                predictor=predictor
            )
            print(f"ü§ñ Provedor de IA: Google Gemini ({GEMINI_MODEL})")

        else:  # OpenAI (padr√£o)
            if not OPENAI_API_KEY:
                print("‚ö†Ô∏è AVISO: OPENAI_API_KEY n√£o configurada!")
                print("üìù Configure no arquivo .env para usar o GPT")
                # Em desenvolvimento, permite continuar com chave dummy
                if ENVIRONMENT != "development":
                    raise ValueError("OPENAI_API_KEY √© obrigat√≥ria em produ√ß√£o")

            agent = AsteriusAgent(
                api_key=OPENAI_API_KEY or "dummy-key",
                model_name=MODEL_NAME,
                temperature=TEMPERATURE,
                max_tokens=MAX_TOKENS,
                memory=memory,
                predictor=predictor
            )
            print(f"ü§ñ Provedor de IA: OpenAI ({MODEL_NAME})")

        print(f"üîß Caminho do modelo: {ML_MODEL_PATH}")
        print(f"‚úÖ Agente inicializado com sucesso")
        print(f"‚úÖ Mem√≥ria: {memory.get_session_count()} sess√µes")
        print(f"‚úÖ Modelo ML: {'XGBoost Real' if predictor.is_loaded else 'Mock'}")
        print("="*50)

        # INICIALIZA NOMADS EM BACKGROUND
        import threading
        def nomads_update():
            try:
                print("üåê (BG) Baixando/preparando forecast NOMADS mais recente...")
                downloader = NOMADSDownloader()
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(downloader.download_forecast_range(days_ahead=5))
                downloader.cleanup_old_files(days_to_keep=30)
                print("‚úÖ (BG) Forecast NOMADS atualizado!")
            except Exception as e:
                print(f"‚ùå (BG) Erro na atualiza√ß√£o NOMADS: {e}")

        threading.Thread(target=nomads_update, daemon=True).start()

        print("üéØ Backend pronto para receber requisi√ß√µes!")
        print("="*50 + "\n")
    except Exception as e:
        print(f"‚ùå Erro na inicializa√ß√£o: {e}")
        raise
    
    yield
    
    # Shutdown
    print("\n" + "="*50)
    print("üëã Encerrando Asterius Backend...")
    print("="*50 + "\n")


# ============================================
# FASTAPI APP
# ============================================


from hourly_weather_router import router as hourly_weather_router

app = FastAPI(
    title="Asterius Backend API",
    description="Backend inteligente para an√°lise de vendas com IA",
    version="1.0.0",
    lifespan=lifespan
)

# Registrar router de dados hor√°rios NOMADS
app.include_router(hourly_weather_router)

# ============================================
# CORS MIDDLEWARE
# ============================================


# --- CORS seguro: apenas localhost e dom√≠nio Vercel ---
origins = [
    "http://localhost:3000",
    "http://localhost:5173",
    "https://asterius-frontend-e5rl9fgx3-nico-draagrons-projects.vercel.app",
    "https://asterius-frontend-6g65zbun4-nico-draagrons-projects.vercel.app"
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# ============================================
# EXCEPTION HANDLERS
# ============================================


import asyncio
from fastapi import BackgroundTasks, Request
import glob
from pathlib import Path
import pandas as pd
import logging

@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """Handler customizado para HTTPException"""
    err = ErrorResponse(
        error=exc.detail,
        detail=None
    )
    # Serializa datetime para string
    content = err.model_dump()
    if hasattr(err, 'timestamp') and isinstance(content.get('timestamp'), (datetime,)):
        content['timestamp'] = content['timestamp'].isoformat()
    return JSONResponse(
        status_code=exc.status_code,
        content=content
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """Handler para exce√ß√µes gerais"""
    print(f"‚ùå Erro n√£o tratado: {exc}")
    err = ErrorResponse(
        error="Erro interno do servidor",
        detail=str(exc) if ENVIRONMENT == "development" else None
    )
    content = err.model_dump()
    if hasattr(err, 'timestamp') and isinstance(content.get('timestamp'), (datetime,)):
        content['timestamp'] = content['timestamp'].isoformat()
    return JSONResponse(
        status_code=500,
        content=content
    )


# ============================================
# ENDPOINTS
from api_analise_utils import prever_e_classificar, exportar_para_api
from fastapi import Request

@app.post("/api/analise", tags=["An√°lise Sazonal"])
async def api_analise(request: Request):
    try:
        dados = await request.json()
        resultado = prever_e_classificar(dados)
        api_json = exportar_para_api(resultado)
        return JSONResponse(content=api_json)
    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=400)
# ============================================

@app.get("/", tags=["Root"])
async def root():
    """Endpoint raiz - informa√ß√µes b√°sicas da API"""
    return HealthResponse(
        status="ok",
        version="1.0.0"
    )


@app.post("/chat", response_model=ChatResponse, tags=["Chat"])
async def chat(request: ChatRequest):
    """
    Endpoint principal do chatbot.
    
    Processa mensagens do usu√°rio e retorna respostas inteligentes.
    Pode incluir visualiza√ß√µes de dados quando apropriado.
    """
    # Valida session_id
    if not validate_session_id(request.session_id):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="session_id inv√°lido. Use apenas letras, n√∫meros, tra√ßos e underscores."
        )
    
    try:
        response = agent.respond(
            message=request.message,
            session_id=request.session_id
        )
        print(f"‚úÖ Resposta gerada | Visualiza√ß√£o: {response.visualization is not None}")
        return response
    except Exception as e:
        print(f"‚ùå Erro no chat: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro ao processar mensagem: {str(e)}"
        )


@app.get("/weather/{days}/{loja_id}", tags=["Weather"])
async def get_weather_forecast(days: int = 5, loja_id: int = 1):
    """
    Endpoint para obter previs√£o meteorol√≥gica do NOMADS.
    
    Args:
        days: N√∫mero de dias de previs√£o (1-7)
        loja_id: ID da loja (1 ou 2)
        
    Returns:
        Dados meteorol√≥gicos formatados
    """
    try:
        from models import XGBoostModel

        if days < 1 or days > 7:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="N√∫mero de dias deve estar entre 1 e 7"
            )

        if loja_id not in [1, 2]:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="ID da loja deve ser 1 ou 2"
            )

        model = XGBoostModel()
        weather_data = model.get_weather_forecast(days, loja_id)

        print(f"üå§Ô∏è Dados meteorol√≥gicos obtidos para {days} dias, loja {loja_id}")

        return {
            "success": True,
            "days": days,
            "loja_id": loja_id,
            "data_source": "NOMADS/GFS",
            "weather_data": weather_data
        }
    except Exception as e:
        print(f"‚ùå Erro ao obter dados meteorol√≥gicos: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro ao obter dados meteorol√≥gicos: {str(e)}"
        )


@app.get("/predictions-with-weather/{days}/{loja_id}", tags=["Prediction"])
async def get_predictions_with_weather(days: int = 5, loja_id: int = 1):
    """
    Endpoint para obter previs√µes de vendas com dados meteorol√≥gicos.
    
    Args:
        days: N√∫mero de dias de previs√£o (1-7)
        loja_id: ID da loja (1 ou 2)
        
    Returns:
        Previs√µes de vendas com dados meteorol√≥gicos correlacionados
    """
    try:
        from models import XGBoostModel
        import importlib.util
        import asyncio

        if days < 1 or days > 7:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="N√∫mero de dias deve estar entre 1 e 7"
            )

        if loja_id not in [1, 2]:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="ID da loja deve ser 1 ou 2"
            )

        from datetime import datetime, timedelta, date as date_cls
        model = XGBoostModel()
        predictions = model.predict_multiple_days(days, loja_id)

        # Gera ciclo de datas: ontem, hoje, +5
        today = datetime.now().date()
        cycle_dates = [(today - timedelta(days=1)) + timedelta(days=i) for i in range(7)]
        cycle_strs = [d.strftime('%Y-%m-%d') for d in cycle_dates]

        # Indexar previs√µes por data
        pred_map = {p.get('weather_data', {}).get('date', ''): p for p in predictions}

        # Se faltar dados NOMADS para algum dos dias, executa captar_nomads
        missing_dates = [date_str for date_str in cycle_strs if date_str not in pred_map or not pred_map[date_str].get('weather_data')]
        if missing_dates:
            print(f"‚ö†Ô∏è Faltam dados NOMADS para: {missing_dates}. Executando captar_nomads...")
            # Caminho absoluto para captar_nomads.py
            captar_path = os.path.join(os.path.dirname(__file__), "NOMADS", "captar_nomads.py")
            import importlib.util
            import asyncio
            spec = importlib.util.spec_from_file_location("captar_nomads", captar_path)
            captar_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(captar_module)
            # Executa o main async do script para baixar os dados faltantes
            await captar_module.main()
            # Recarrega o modelo e as previs√µes ap√≥s baixar os dados
            model = XGBoostModel()
            predictions = model.predict_multiple_days(days, loja_id)
            pred_map = {p.get('weather_data', {}).get('date', ''): p for p in predictions}

        def to_str(val):
            if isinstance(val, (datetime, date_cls)):
                return val.isoformat()
            return val

        formatted_data: dict[str, Any] = {
            "success": True,
            "days": 7,
            "loja_id": loja_id,
            "model_status": "real" if not model.is_mock else "mock",
            "predictions": [],
            "weather_data": [],
            "charts": {
                "sales": {"labels": [], "data": []},
                "temperature": {"labels": [], "data": []},
                "precipitation": {"labels": [], "data": []}
            }
        }

        for date_str in cycle_strs:
            pred = pred_map.get(date_str)
            if pred:
                weather = pred.get('weather_data', {})
                value = pred['prediction']
                confidence = pred.get('confidence', 0.75)
            else:
                weather = {"date": date_str}
                value = None
                confidence = None
            formatted_data["predictions"].append({
                "date": to_str(date_str),
                "value": value,
                "confidence": confidence
            })
            formatted_data["weather_data"].append({
                "date": to_str(date_str),
                "temperature": weather.get('temp_media', None),
                "temp_max": weather.get('temp_max', None),
                "humidity": weather.get('umid_mediana', None),
                "precipitation": weather.get('precipitacao_total', None),
                "radiation": weather.get('rad_max', None)
            })
            # Dados para gr√°ficos
            sales_chart = formatted_data["charts"]["sales"]
            temp_chart = formatted_data["charts"]["temperature"]
            precip_chart = formatted_data["charts"]["precipitation"]
            sales_chart["labels"].append(to_str(date_str))
            sales_chart["data"].append(value)
            temp_chart["labels"].append(to_str(date_str))
            temp_chart["data"].append(weather.get('temp_media', None))
            precip_chart["labels"].append(to_str(date_str))
            precip_chart["data"].append(weather.get('precipitacao_total', None))

        print(f"üìäüå§Ô∏è Previs√µes com dados meteorol√≥gicos geradas para 7 dias, loja {loja_id}")
        return formatted_data
    except Exception as e:
        print(f"‚ùå Erro ao gerar previs√µes com dados meteorol√≥gicos: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro ao gerar previs√µes: {str(e)}"
        )


@app.get("/sessions", tags=["Memory"])
async def get_sessions():
    """
    Lista todas as sess√µes ativas.
    √ötil para debug e monitoramento.
    """
    sessions = memory.get_all_sessions()
    return {
        "total": len(sessions),
        "sessions": sessions
    }

    
    history = memory.get_context(session_id)
    
    if not history:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Sess√£o {session_id} n√£o encontrada"
        )

    return {
        "session_id": session_id,
        "message_count": len(history),
        "messages": history
    }


@app.get("/stats", tags=["Stats"])
async def get_stats():
    """
    Retorna estat√≠sticas do sistema.
    """
    return {
        "agent": agent.get_capabilities(),
        "memory": {
            "total_sessions": memory.get_session_count(),
            "sessions": memory.get_all_sessions()
        },
        "predictor": {
            "model_loaded": predictor.is_loaded,
            "model_path": predictor.model_path
        }
    }


# ============================================
# MAIN - Para rodar com python main.py
# ============================================

@app.get("/hourly-precipitation/{date}", tags=["Weather"])
async def get_hourly_precipitation(date: str):
    """
    Retorna dados de precipita√ß√£o por hora para um dia espec√≠fico
    
    Args:
        date: Data no formato YYYY-MM-DD
        
    Returns:
        Dados de precipita√ß√£o por hora (24 horas)
    """
    try:
        import random
        import math
        from datetime import datetime
        # Por enquanto, vamos gerar dados mockados
        # No futuro, isso pode ser expandido para usar dados NOMADS hor√°rios reais
        hourly_data = []
        for hour in range(24):
            hour_str = f"{hour:02d}:00"
            # Simular padr√£o de precipita√ß√£o realista
            precipitation = 0.0
            if 13 <= hour <= 18:  # Tarde (mais prov√°vel)
                precipitation = max(0, (hour - 10) * 0.8 + (hour - 15) ** 2 * 0.2)
            elif 20 <= hour <= 23:  # Noite
                precipitation = max(0, (23 - hour) * 0.5)
            elif 2 <= hour <= 6:  # Madrugada (menos prov√°vel)
                precipitation = max(0, (6 - hour) * 0.3)
            # Adicionar varia√ß√£o aleat√≥ria
            precipitation += random.uniform(-0.5, 1.5)
            precipitation = max(0, precipitation)  # N√£o pode ser negativo
            # Temperatura simulada (varia ao longo do dia)
            base_temp = 22
            temp_variation = 8 * math.sin((hour - 6) * math.pi / 12)
            temperature = base_temp + temp_variation + random.uniform(-2, 2)
            hourly_data.append({
                "hour": hour_str,
                "precipitation": round(precipitation, 1),
                "temperature": round(temperature, 1)
            })
        # Use string for timestamp to avoid JSON serialization error
        # Find peak_hour safely (handle empty list)
        peak_hour = None
        if hourly_data:
            peak = max(hourly_data, key=lambda x: float(x["precipitation"]))
            peak_hour = peak["hour"]
        return {
            "success": True,
            "date": date,
            "data": hourly_data,
            "total_precipitation": sum(item["precipitation"] for item in hourly_data),
            "peak_hour": peak_hour,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        print(f"‚ùå Erro ao obter dados hor√°rios de precipita√ß√£o: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro ao obter dados hor√°rios: {str(e)}"
        )


@app.get("/hourly-weather/{date}/{loja_id}", tags=["Weather"])
async def get_hourly_weather(date: str, loja_id: int):
    """
    Retorna dados de temperatura por hora para um dia espec√≠fico e loja, agora via SQLite
    """
    try:
        from database import AsteriusDB

        db = AsteriusDB()
        df = db.get_hourly_weather(date, loja_id)
        if df.empty:
            raise HTTPException(
                status_code=404,
                detail=f"N√£o h√° dados hor√°rios para loja {loja_id} em {date}"
            )
        hourly_data = []
        for _, row in df.iterrows():
            hourly_data.append({
                "hour": int(row["hour"]),
                "temperature": row.get("temp_media", row.get("temperature", None)),
                "temp_max": row.get("temp_max", None),
                "humidity": row.get("umid_mediana", None),
                "precipitation": row.get("precipitacao_total", None),
                "radiation": row.get("rad_max", None)
            })
        peak_hour = None
        if hourly_data:
            peak_hour = max(hourly_data, key=lambda x: x["temperature"] or 0)["hour"]
        from datetime import datetime
        return {
            "success": True,
            "date": date,
            "loja_id": loja_id,
            "data": hourly_data,
            "peak_hour": peak_hour,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        print(f"‚ùå Erro ao obter dados hor√°rios reais: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro ao obter dados hor√°rios reais: {str(e)}"
        )


if __name__ == "__main__":
    import uvicorn
    
    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", "8000"))
    
    print(f"\nüöÄ Iniciando servidor em http://{host}:{port}")
    print(f"üìö Documenta√ß√£o em http://{host}:{port}/docs\n")
    
    uvicorn.run(
        "main:app",
        host=host,
        port=port,
        reload=True if ENVIRONMENT == "development" else False
    )


# ============================================
# NOMADS MANAGEMENT ENDPOINTS
# ============================================

@app.post("/api/trigger-nomads-update", tags=["NOMADS"])
async def trigger_nomads_update(background_tasks: BackgroundTasks):
    """
    Dispara atualiza√ß√£o dos dados NOMADS em background.
    """
    async def update_nomads():
        try:
            from NOMADS.captar_nomads import NOMADSDownloader
            downloader = NOMADSDownloader()
            await downloader.download_forecast_range(days_ahead=5)
            downloader.cleanup_old_files(days_to_keep=30)
            logging.info("NOMADS update conclu√≠do com sucesso.")
        except Exception as e:
            logging.error(f"Erro ao atualizar NOMADS: {e}")
    background_tasks.add_task(update_nomads)
    return {"success": True, "message": "Atualiza√ß√£o NOMADS agendada em background."}


@app.get("/api/nomads-status", tags=["NOMADS"])
async def nomads_status():
    """
    Retorna status dos dados NOMADS (arquivos forecast_*.csv em NOMADS/dados/cache).
    """
    try:
        cache_dir = Path(__file__).parent / "NOMADS" / "dados" / "cache"
        files = sorted(glob.glob(str(cache_dir / "forecast_*.csv")))
        files_count = len(files)
        if not files:
            return {"success": False, "message": "Nenhum arquivo forecast_*.csv encontrado."}
        last_file = max(files, key=os.path.getmtime)
        last_update = datetime.fromtimestamp(os.path.getmtime(last_file)).isoformat()
        df = pd.read_csv(last_file)
        records_count = len(df)
        if 'date' in df.columns:
            dates_available = sorted(df['date'].unique())
            date_range = f"{dates_available[0]} a {dates_available[-1]}" if dates_available else None
        else:
            dates_available = []
            date_range = None
        return {
            "success": True,
            "last_update": last_update,
            "files_count": files_count,
            "dates_available": dates_available,
            "date_range": date_range,
            "records_count": records_count
        }
    except Exception as e:
        logging.error(f"Erro ao obter status NOMADS: {e}")
        return {"success": False, "message": f"Erro ao obter status NOMADS: {e}"}