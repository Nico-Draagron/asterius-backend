"""
Memory Management do Asterius
Gerencia o hist√≥rico de conversas por sess√£o de usu√°rio
"""

import json
import os
from typing import Dict, List, Optional
from datetime import datetime
from pathlib import Path
from schemas import Message


class ConversationMemory:
    """
    Gerencia a mem√≥ria de conversas do agente.
    Mant√©m as √∫ltimas 5 mensagens por sess√£o e persiste em disco.
    """
    
    def __init__(self, history_path: str = "data/history.json", max_messages: int = 5):
        """
        Inicializa o gerenciador de mem√≥ria.
        
        Args:
            history_path: Caminho para o arquivo de hist√≥rico JSON
            max_messages: N√∫mero m√°ximo de mensagens a manter por sess√£o (padr√£o: 5)
        """
        self.history_path = history_path
        self.max_messages = max_messages
        self.conversations: Dict[str, List[Dict]] = {}
        
        # Cria o diret√≥rio se n√£o existir
        Path(history_path).parent.mkdir(parents=True, exist_ok=True)
        
        # Carrega hist√≥rico existente
        self._load_history()
    
    def _load_history(self):
        """Carrega o hist√≥rico do arquivo JSON"""
        if os.path.exists(self.history_path):
            try:
                with open(self.history_path, 'r', encoding='utf-8') as f:
                    self.conversations = json.load(f)
                print(f"‚úÖ Hist√≥rico carregado: {len(self.conversations)} sess√µes")
            except json.JSONDecodeError:
                print(f"‚ö†Ô∏è Erro ao carregar hist√≥rico. Criando novo arquivo.")
                self.conversations = {}
        else:
            print(f"üìù Arquivo de hist√≥rico n√£o encontrado. Ser√° criado em: {self.history_path}")
            self.conversations = {}
    
    def _save_history(self):
        """Salva o hist√≥rico no arquivo JSON"""
        try:
            with open(self.history_path, 'w', encoding='utf-8') as f:
                json.dump(self.conversations, f, ensure_ascii=False, indent=2, default=str)
        except Exception as e:
            print(f"‚ùå Erro ao salvar hist√≥rico: {e}")
    
    def add_message(self, session_id: str, role: str, content: str):
        """
        Adiciona uma mensagem ao hist√≥rico da sess√£o.
        
        Args:
            session_id: ID da sess√£o do usu√°rio
            role: 'user' ou 'assistant'
            content: Conte√∫do da mensagem
        """
        # Cria a sess√£o se n√£o existir
        if session_id not in self.conversations:
            self.conversations[session_id] = []
        
        # Adiciona a mensagem
        message = {
            "role": role,
            "content": content,
            "timestamp": datetime.now().isoformat()
        }
        
        self.conversations[session_id].append(message)
        
        # Mant√©m apenas as √∫ltimas N mensagens
        if len(self.conversations[session_id]) > self.max_messages * 2:  # *2 porque user + assistant
            self.conversations[session_id] = self.conversations[session_id][-(self.max_messages * 2):]
        
        # Salva no disco
        self._save_history()
    
    def get_context(self, session_id: str) -> List[Dict]:
        """
        Retorna o contexto (√∫ltimas mensagens) de uma sess√£o.
        
        Args:
            session_id: ID da sess√£o do usu√°rio
            
        Returns:
            Lista de mensagens no formato {"role": "...", "content": "..."}
        """
        return self.conversations.get(session_id, [])
    
    def get_recent_messages(self, session_id: str, limit: Optional[int] = None) -> List[Dict]:
        """
        Retorna as N mensagens mais recentes de uma sess√£o.
        
        Args:
            session_id: ID da sess√£o
            limit: N√∫mero m√°ximo de mensagens (None = todas)
            
        Returns:
            Lista de mensagens
        """
        messages = self.conversations.get(session_id, [])
        if limit:
            return messages[-limit:]
        return messages
    
    def clear_session(self, session_id: str):
        """
        Limpa o hist√≥rico de uma sess√£o espec√≠fica.
        
        Args:
            session_id: ID da sess√£o a limpar
        """
        if session_id in self.conversations:
            del self.conversations[session_id]
            self._save_history()
            print(f"üóëÔ∏è Hist√≥rico da sess√£o {session_id} removido")
    
    def get_all_sessions(self) -> List[str]:
        """Retorna lista de todas as sess√µes ativas"""
        return list(self.conversations.keys())
    
    def get_session_count(self) -> int:
        """Retorna o n√∫mero total de sess√µes"""
        return len(self.conversations)
    
    def get_message_count(self, session_id: str) -> int:
        """Retorna o n√∫mero de mensagens em uma sess√£o"""
        return len(self.conversations.get(session_id, []))
    
    def format_context_for_llm(self, session_id: str) -> str:
        """
        Formata o contexto da sess√£o para enviar ao LLM.
        
        Args:
            session_id: ID da sess√£o
            
        Returns:
            String formatada com o hist√≥rico da conversa
        """
        messages = self.get_context(session_id)
        
        if not messages:
            return "Nenhuma conversa anterior."
        
        formatted = "Hist√≥rico da conversa:\n\n"
        for msg in messages:
            role = "Usu√°rio" if msg["role"] == "user" else "Assistente"
            formatted += f"{role}: {msg['content']}\n"
        
        return formatted
    
    def __repr__(self):
        return f"<ConversationMemory sessions={self.get_session_count()} path={self.history_path}>"